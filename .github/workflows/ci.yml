on:
  push:
    branches: master
  pull_request:
    branches: '*'

name: Rust IPFS

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
        - rust: stable
        #- rust: nightly

        platform:
        - target: x86_64-unknown-linux-gnu
          host: ubuntu-latest
          cross: false

        - target: x86_64-apple-darwin
          host: macos-latest
          cross: false

        - target: x86_64-pc-windows-msvc
          host: windows-latest
          cross: false

        - target: armv7-linux-androideabi
          host: ubuntu-latest
          cross: true

        - target: aarch64-linux-android
          host: ubuntu-latest
          cross: true

        - target: x86_64-apple-ios
          host: macos-latest
          cross: true

        - target: aarch64-apple-ios
          host: macos-latest
          cross: true

       # - target: wasm32-unknown-unknown
       #   host: ubuntu-latest
       #   cross: true
    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      LLVM_CONFIG_PATH: /usr/local/opt/llvm/bin/llvm-config
      NDK_HOME: /usr/local/lib/android/sdk/ndk-bundle
      VCPKGRS_DYNAMIC: 1
      PKG_CONFIG_ALLOW_CROSS: 1

    runs-on: ${{ matrix.platform.host }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Cache cargo folder
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ matrix.platform.target }}-cargo-${{ matrix.toolchain.rust }}

    - name: Install dependencies ubuntu
      if: matrix.platform.host == 'ubuntu-latest'
      run: sudo apt-get install llvm-dev libssl-dev pkg-config

    - name: Install dependencies macos
      if: matrix.platform.host == 'macos-latest'
      run: brew install llvm openssl

    - name: Install dependencies windows
      if: matrix.platform.host == 'windows-latest'
      run: |
        choco install llvm
        vcpkg integrate install
        vcpkg install openssl:x64-windows
        Copy-Item C:\vcpkg\installed\x64-windows\bin\libcrypto-1_1-x64.dll C:\vcpkg\installed\x64-windows\bin\libcrypto.dll
        Copy-Item C:\vcpkg\installed\x64-windows\bin\libssl-1_1-x64.dll C:\vcpkg\installed\x64-windows\bin\libssl.dll
        Get-ChildItem C:\vcpkg\installed\x64-windows\bin
        Get-ChildItem C:\vcpkg\installed\x64-windows\lib

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.toolchain.rust }}
        targets: ${{ matrix.platform.target }}

    - name: Install cargo-ndk
      if: contains(matrix.platform.target, 'android')
      run: cargo install cargo-ndk

    - name: Build
      if: matrix.platform.cross == false
      run: cargo build --workspace

    - name: Build android
      if: contains(matrix.platform.target, 'android')
      run: cargo ndk --android-platform 29 --target ${{ matrix.platform.target }} build --workspace --exclude ipfs-http
      # exclude http on android because openssl

    - name: Build other cross compilations
      if: contains(matrix.platform.target, 'android') == false && matrix.platform.cross == true
      run: cargo build --workspace --target ${{ matrix.platform.target }}

    - name: Rust tests
      if: matrix.platform.cross == false
      run: cargo test --workspace

  lint-rust:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Cache cargo folder
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: lint-cargo

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
        components: clippy, rustfmt

    - name: cargo fmt
      run: cargo fmt --all -- --check

    - name: cargo clippy
      run: cargo clippy -- -D warnings

  readme-doctest:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Cache cargo folder
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: readme-doctest

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly

    - name: cargo test --features nightly
      run: cargo test --features nightly
